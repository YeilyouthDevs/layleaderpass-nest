name: 빌드

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout Backend
      - name: Checkout Backend
        uses: actions/checkout@v4
        with:
          path: backend
  
      # 2. Checkout Frontend
      - name: Checkout Frontend
        uses: actions/checkout@v4
        with:
          repository: YeilyouthDevs/layleaderpass-sveltekit
          path: frontend
  
      # 3. Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -f backend/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/layleaderpass:latest .
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/layleaderpass:latest
  
      # 4. SSH로 원격 서버에 접속
      - name: SSH to Remote Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            # Docker Hub 로그인
            echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | sudo docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # Docker 이미지 가져오기
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/layleaderpass:latest
            
            # .env 파일 구성
            sudo mkdir -p /app
            echo "${{ secrets.ENV_FILE }}" | sudo tee /app/.env > /dev/null
            echo "환경 변수 파일 생성 완료"
            
            # 실행 중인 동일 이미지의 컨테이너 중지 및 삭제
            running_container=$(sudo docker ps --filter "ancestor=${{ secrets.DOCKER_HUB_USERNAME }}/layleaderpass:latest" --format "{{.ID}}")
            if [ ! -z "$running_container" ]; then
              echo "기존 컨테이너 중지 및 삭제..."
              sudo docker stop $running_container
              sudo docker rm $running_container
            fi

            # 포트를 점유한 모든 컨테이너 중지 및 삭제
            conflicting_container=$(sudo docker ps --filter "publish=${{ secrets.APP_PORT }}" --format "{{.ID}}")
            if [ ! -z "$conflicting_container" ]; then
              echo "포트를 점유 중인 컨테이너 중지 및 삭제..."
              sudo docker stop $conflicting_container
              sudo docker rm $conflicting_container
            fi

            # 컨테이너 실행
            sudo docker run -d \
              --add-host=host.docker.internal:172.17.0.1 \
              --env-file /app/.env \
              -e NODE_ENV=PRODUCTION \
              -p ${{ secrets.APP_PORT }}:3000 \
              ${{ secrets.DOCKER_HUB_USERNAME }}/layleaderpass:latest

            # 실행 상태 확인
            sudo docker ps